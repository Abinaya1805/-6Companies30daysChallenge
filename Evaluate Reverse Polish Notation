Input & Output:
Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22



class Solution {
    public int evalRPN(String[] tokens) {
        int sum = 0;
        if(tokens.length==1){
            return Integer.parseInt(tokens[0]);
        }
        Stack<String> stack = new Stack<>();
        List<String> al = Arrays.asList(new String[]{"+","-","/","*"});
        for(int i=0;i<tokens.length;i++){
            if(al.contains(tokens[i])){
                int n1 = Integer.parseInt(stack.pop());
                int n2 = Integer.parseInt(stack.pop());
                if(tokens[i].equals("+")){
                    sum = n1+n2;
                    stack.push(sum+"");
                }
                else if(tokens[i].equals("-")){
                    sum = n2-n1;
                    stack.push(sum+"");
                }
                else if(tokens[i].equals("*")){
                    sum = n1*n2;
                    stack.push(sum+"");
                }
                else{
                    sum = n2/n1;
                    stack.push(sum+"");
                }
            }
            else{
                stack.push(tokens[i]);
            }
        }
        return sum;
    }
}
